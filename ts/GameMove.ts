namespace Kharbga {
    /**
     * @summary: Defines a game move
     */
    export class GameMove {
        constructor(from: string, to: string, p: Player) {
            this.from = from;
            this.to = to;
            this.player = p;
            this.isSetting = false;
            this.exchangeRequest = false;
            this.beforeFen = "";
            this.afterFen = "";
            this.exchanged = "";
            this.captured = "";
            this.message = "";
            this.number = 0;
            this.playerName = "";
            this.flags = new GameMoveFlags();
        }
        /**
         * @summary the from cell id
         */
        public from: string;

        /**
         * @summary the to cell id
         */
        public to: string;

        /**
         * @summary indicate player is resigning - use flags instead
         */
        public resigned: boolean;

        /**
         * @summary indicates player is requesting exchange request or accepting exchange request - use flags instead
         * the piece offered for the exchange is indicated by the to cell
         */
        public exchangeRequest: boolean;

        /**
         * @summary the player making the move
         */
        public player: Player;

        /**
         * @summary indicates if the move is a setting or a move
         */
        public isSetting: boolean;

        /**
         * @summary the move number generated by the game
         */
        public number: number;

        /**
         * @summary This is the game id
         */
        public gameName: string;

        /**
         * @summary the player name if player is not set
         */
        public playerName: string;

        /**
         * @summary the move time
         */
        public moveTime: Date;

        /**
         * @summary the board soldier positions before processing
         */
        public beforeFen: string;
        /**
         * @summary the board soldier positions after processing
         */
        public afterFen: string;

        /**
         * @summary the user message with the move
         */
        public message: string;

        /**
         * @summary a unique id generated at the client
         */
        public clientId: string;

        /**
         * @summary the captured soldier locations with this move if any
         */
        public captured: string;

        /**
         * @summary the exchanged solider locations with this move if any
         */
        public exchanged: string;

        /**
         * @summary the state of the move flags with this move
         */
        public readonly flags: GameMoveFlags;

        public copyFlags(flags: GameMoveFlags): void {
            this.flags.copy(flags);
        }
    }

    /**
     * @summary represents a move that is generated by the computer and is analysed for possible captures or 
     * moves
     */
    export class AnalysedGameMove {
        constructor(from: string ="", to: string ="", ok: boolean = false, error:string= "") {
            this.from = from;
            this.to= to;
            this.ok = ok;
            this.error = error;
            this.possible = 0;
        }
        /**
         * @summary the from cell id
         */
        public from: string;

        /**
         * @summary the to cell id
         */
        public to: string;

        /**
         * @summary indicates that move is an unreachable soldier
         */
        public exchangeRequest : boolean;

        /**
         * @summary the possible captures this move makes
         */
        public captures: string;

        /**
         * @summary the possible saves this move makes
         */
        public saves: string;

        /**
         * @summary indicates if this result is ok
         */
        public ok : boolean;

        /**
         * @summary the error message if not ok
         */
        public error : string;

        /**
         * Number of possible moves or settings
         */
        public possible: number;

        /**
         * The possible settings
         */
        public possibleSettings: string [];

        /**
         * The possible game moves
         */
        public possibleMoves: GameMove[];
    }
}